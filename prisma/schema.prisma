// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  name      String
  email     String  @unique
  password  String
  nickname  String
  img_user  String?
  street    String?
  number    Int?
  city      String?
  state     String?
  zip_code  String?
  reference String?

  comments         Comments[]
  Habit            Habit[]
  BinauralFavorite BinauralFavorite[]

  @@map("users")
}

model Binaural {
  id                 Int               @id @default(autoincrement())
  binaural_name      String
  binaural_sound     String
  binaural_img       String
  binaural_duration  Int
  binaral_autor      String
  binauralCategory   binauralCategory? @relation(fields: [binauralCategoryId], references: [id])
  binauralCategoryId Int

  BinauralFavorite BinauralFavorite[]

  @@map("binaural")
}

model binauralCategory {
  id     Int    @id @default(autoincrement())
  name   String
  images String

  binaural Binaural[]

  @@map("binauralCategory")
}

model BinauralFavorite {
  id         Int      @id @default(autoincrement())
  userId     String
  binauralId Int
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  binaural Binaural @relation(fields: [binauralId], references: [id])

  @@unique([userId, binauralId])
  @@map("binaural_favorites")
}

model Meditation {
  id                   Int                @id @default(autoincrement())
  meditation_name      String
  meditation_sound     String
  meditation_img       String
  meditation_duration  Int //duração em segundos  
  Meditation_autor     String
  meditation_category  meditationCategory @relation(fields: [meditationCategoryId], references: [id])
  meditationCategoryId Int

  @@map("meditation")
}

model meditationCategory {
  id   Int    @id @default(autoincrement())
  name String

  meditation Meditation[]

  @@map("meditationcategory")
}

model Modules {
  id                 Int    @id @default(autoincrement())
  module_name        String
  module_description String

  contents Contents[]

  @@map("modules")
}

model Contents {
  id                 Int     @id @default(autoincrement())
  contents_name      String
  contents_type      String  @default("video")
  contets_duration   Int
  contents_video_url String?
  contents_article   String?
  modules            Modules @relation(fields: [modulesId], references: [id])
  modulesId          Int

  comments Comments[]

  @@map("contents")
}

model Comments {
  id              Int    @id @default(autoincrement())
  comments_text   String
  comments_rating Int
  comments_likes  Int    @default(0)

  created_at DateTime @default(now())

  contents   Contents? @relation(fields: [contentsId], references: [id])
  contentsId Int

  User   User?  @relation(fields: [userId], references: [id])
  userId String

  @@map("comments")
}

model Habit {
  id          Int     @id @default(autoincrement())
  name        String
  description String? // Campo de descrição do hábito (opcional)
  color       String

  userId    String // Referência ao usuário que criou o hábito
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user           User            @relation(fields: [userId], references: [id])
  habitSchedules HabitSchedule[]
  habitLogs      HabitLog[] // Relação com os registros de hábitos

  @@map("habit")
}

model HabitSchedule {
  id        Int @id @default(autoincrement())
  habitId   Int
  dayOfWeek Int // Dia da semana (domingo: 0, segunda: 1, ..., sábado: 6)

  habit Habit @relation(fields: [habitId], references: [id])

  @@map("habit_schedule")
}

model HabitLog {
  id        Int      @id @default(autoincrement())
  habitId   Int
  date      DateTime
  completed Boolean
  dayOfWeek Int // Dia da semana (domingo: 0, segunda: 1, ..., sábado: 6)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  habit Habit @relation(fields: [habitId], references: [id])

  @@map("habit_log")
}
